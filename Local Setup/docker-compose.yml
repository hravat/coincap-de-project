  
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:latest}
  build:
      context: ./DockerAirflow  # Path to the directory containing Dockerfile
      dockerfile: Dockerfile  # Name of the Dockerfile (if it's named 'Dockerfile')
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@postgres_db:5432/airflow_db
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@postgres_db:5432/airflow_db
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW_DB_USER: ${AIRFLOW_DB_USER}
    AIRFLOW_DB_PASSWORD: ${AIRFLOW_DB_PASSWORD}
    AIRFLOW_UID: ${AIRFLOW_UID:-1000}
  volumes:
    - ./airflow/dags:/opt/airflow/dags:rw
    - ./airflow/logs:/opt/airflow/logs:rw
    - ./airflow/config:/opt/airflow/config:rw
    - ./airflow/plugins:/opt/airflow/plugins:rw
#    - ./airflow/python:/opt/airflow/python-scripts:rw
#    - ./airflow/sql:/opt/airflow/sql-scripts:rw
#    - ./airflow/pyspark:/opt/airflow/pyspark-scripts:rw    
    - ./airflow/airflow-init.sh:/opt/airflow/airflow-init.sh
#    - ./master-data:/opt/airflow/master-data
  user: "$AIRFLOW_UID:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres_db:
      condition: service_healthy
    
services:

  postgres_db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      AIRFLOW_DB_USER: ${AIRFLOW_DB_USER}
      AIRFLOW_DB_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      KESTRA_DB_USER: ${KESTRA_DB_USER}
      KESTRA_DB_PASSWORD: ${KESTRA_DB_PASSWORD}
      FLINK_DB_USER: ${FLINK_DB_USER}
      FLINK_DB_PASSWORD: ${FLINK_DB_PASSWORD}
      DWH_DB_USER: ${DWH_DB_USER}
      DWH_DB_PASSWORD: ${DWH_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      #- postgres-db-volume:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d/ 
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow_user", "-d", "airflow_db", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflownetwork




  broker:
    image: confluentinc/cp-kafka:7.9.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    networks:
      - airflownetwork 

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8100:8100"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8100
    networks:
      - airflownetwork 
  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.4-7.6.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8100
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.9.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    networks:
      - airflownetwork 

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.9.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8100"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
        - airflownetwork 
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.9.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8100"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    networks:
      - airflownetwork 
  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.9.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
        - airflownetwork 
  ksql-datagen:
    image: confluentinc/ksqldb-examples:7.9.0
    hostname: ksql-datagen
    container_name: ksql-datagen
    depends_on:
      - ksqldb-server
      - broker
      - schema-registry
      - connect
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                      cub kafka-ready -b broker:29092 1 40 && \
                      echo Waiting for Confluent Schema Registry to be ready... && \
                      cub sr-ready schema-registry 8100 40 && \
                      echo Waiting a few seconds for topic creation to finish... && \
                      sleep 11 && \
                      tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      STREAMS_BOOTSTRAP_SERVERS: broker:29092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8100
    networks:
      - airflownetwork 
  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.9.0
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8100'
    networks:
      - airflownetwork 


      
################ FLINK SERVICES ##############################################

  sql-client:
      container_name: 'sql-client'
      build:
        context: .
        dockerfile: flink/sql-client/Dockerfile
      depends_on:
        - jobmanager
      environment:
        FLINK_JOBMANAGER_HOST: jobmanager
      volumes:
        - ./flink/settings/:/settings
        - ./flink/sql:/opt/flink/sql-scripts        
      networks:
        - airflownetwork
      #entrypoint: "/path/to/docker-entrypoint.sh"

  jobmanager:
    image: flink:latest
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
    volumes:
      - ./flink/settings/:/settings
      - ./flink/data/:/data
      - ./flink/sql:/opt/flink/sql-scripts
      - ~/flink-data/catalogs:/flink/catalogs
    networks:
      - airflownetwork

  taskmanager:
    image: flink:latest
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 10
    volumes:
      - ./flink/settings/:/settings
      - ./flink/data/:/data
    networks:
      - airflownetwork

################ FLINK SERVICES ##############################################

### DBT SERVICES ############################################################
  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:latest
    container_name: dbt_container
    depends_on:
      - postgres_db
    volumes:
      - ./dbt_project:/usr/app
      - ./dbt:/root/.dbt
    working_dir: /usr/app
    entrypoint: ["tail", "-f", "/dev/null"]
    networks:
      - airflownetwork

### DBT SERVICES ############################################################


## Grafana Services ##########################################################
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}  # Set the admin password
    ports:
      - "3000:3000"  # Expose Grafana's port
    volumes:
      - ~/grafana-storage:/var/lib/grafana  # Persist Grafana data
      - ./grafana/dashboards/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml  # Provisioning configuration
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/geojson:/usr/share/grafana/public/maps
      - ./grafana/scripts:/usr/share/grafana/public/scripts
    networks:
      - airflownetwork

## Grafana Services ##########################################################



################KESTRA SERVICES ####################

  kestra:
      image: kestra/kestra:latest
      # Note that this setup with a root user is intended for development purpose.
      # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
      # To run Kestra in a rootless mode in production, see: https://kestra.io/docs/installation/podman-compose
      user: "root"
      command: [ "server", "standalone", "-f", "/app/flows"] 
      volumes:
        - ~/kestra-data:/app/storage
        - /var/run/docker.sock:/var/run/docker.sock
        - /tmp/kestra-wd:/tmp/kestra-wd
        - ./kestra/flows:/app/flows
        - ./grafana/geojson:/app/geojson
      environment:
        KESTRA_CONFIGURATION: |
          datasources:
            postgres:
              url: jdbc:postgresql://postgres_db:5432/kestra_db
              driverClassName: org.postgresql.Driver
              username: kestra_user
              password: kestra_password
          kestra:
            server:
              basicAuth:
                enabled: false
                username: "admin@kestra.io" # it must be a valid email address
                password: kestra
            repository:
              type: postgres
            storage:
              type: local
              local:
                basePath: "/app/storage"
            queue:
              type: postgres
            tasks:
              tmpDir:
                path: /tmp/kestra-wd/tmp
            url: http://kestra:8085/
            KAFKA_BOOTSTRAP_SERVERS: broker:29092 
        SECRET_DWH_STG_PASSWORD: ${KESTRA_SECRET_DWH_DB_PASSWORD}
        KESTRA_COINCAP_API_KEY: ${COINCAP_API_KEY}
      ports:
        - "8085:8080"
        - "8086:8081"
      depends_on:
        postgres_db:
          condition: service_started
      networks:
        - airflownetwork 
            


################KESTRA SERVICES ####################

networks:
  airflownetwork:
    driver: bridge



################### AIRFLOW SERVICES  COMMENTED FOR NOW AS SWITCHING TO KESTRA########################################    
#  redis:
#    # Redis is limited to 7.2-bookworm due to licencing change
#    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
#    image: redis:7.2-bookworm
#    expose:
#      - 6379
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 30s
#      retries: 50
#      start_period: 30s
#    restart: always
#    networks:
#      - airflownetwork
#          
#
##  airflow-webserver:
#    <<: *airflow-common
##    build:
##      context: ./DockerAirflow  # Path to the directory containing Dockerfile
##      dockerfile: Dockerfile 
#    command:
#      webserver
#    ports:
#      - "8082:8080"
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://localhost:8082/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#    networks:
#      - airflownetwork
#    environment:
#      AIRFLOW_UID: "${AIRFLOW_UID:-1000}"   
#      AIRFLOW_GID: "0"
#      AIRFLOW_DB_USER: ${AIRFLOW_DB_USER}
#      AIRFLOW_DB_PASSWORD: ${AIRFLOW_DB_PASSWORD}
#      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@postgres_db:5432/airflow_db
#      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@postgres_db:5432/airflow_db
#      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
#
#  airflow-scheduler:
##    build:
##      context: ./DockerAirflow  # Path to the directory containing Dockerfile
##      dockerfile: Dockerfile 
#    <<: *airflow-common
#    #entrypoint: /bin/bash
#    #yamllint disable rule:line-length
#    #command: ["/opt/airflow/airflow-scheduler-init.sh"]
#    command:
#      scheduler
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#    networks:
#      - airflownetwork
#      
#  airflow-worker:
#    <<: *airflow-common
#    command: celery worker
#    healthcheck:
#      # yamllint disable rule:line-length
#      test:
#        - "CMD-SHELL"
#        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    environment:
#      <<: *airflow-common-env
#      # Required to handle warm shutdown of the celery workers properly
#      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
#      DUMB_INIT_SETSID: "0"
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#    networks:
#      - airflownetwork
#
#  airflow-triggerer:
#    <<: *airflow-common
#    command: triggerer
#    healthcheck:
#      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#    networks:
#      - airflownetwork
#
#  airflow-init:
#    #build: Dockerfile  
#    <<: *airflow-common
#    entrypoint: /bin/bash
#    # yamllint disable rule:line-length
#    command: ["/opt/airflow/airflow-init.sh"]
#    # yamllint enable rule:line-length
#    environment:
#      <<: *airflow-common-env
#      _AIRFLOW_DB_MIGRATE: 'true'
#      _AIRFLOW_WWW_USER_CREATE: 'true'
#      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
#      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
#      _PIP_ADDITIONAL_REQUIREMENTS: ''
#    user: "0:0"
#    volumes:
#      - ./airflow:/sources
#      - ./airflow/airflow-init.sh:/opt/airflow/airflow-init.sh
#    networks:
#      - airflownetwork      
##
#  airflow-cli:
#    <<: *airflow-common
#    profiles:
#      - debug
#    environment:
#      <<: *airflow-common-env
#      CONNECTION_CHECK_MAX_COUNT: "0"
#    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
#    command:
#      - bash
#      - -c
#      - airflow
#    networks:
#      - airflownetwork
#
#  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
#  # or by explicitly targeted on the command line e.g. docker-compose up flower.
#  # See: https://docs.docker.com/compose/profiles/
#  flower:
#    <<: *airflow-common
#    command: celery flower
#    profiles:
#      - flower
#    ports:
#      - "5555:5555"
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#    networks:
#      - airflownetwork


################### AIRFLOW SERVICES  COMMENTED FOR NOW AS SWITCHING TO KESTRA########################################    



#####################3OLD KAFA SERVICES COMMENTED FOR NOW AS SWITCHING TO KESTRA############################################
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    container_name: kafka
#    ports:
#      - "9092:9092"
#      - "9093:9093"
#      - "8082:8082"  # Exposing port 8082 for REST API
#    environment:
#      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
#      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
#      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
#      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"  # Defines the controller voters.
#      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093,OUTSIDE://0.0.0.0:9094
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,INSIDE:PLAINTEXT,CONTROLLER:PLAINTEXT,OUTSIDE:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since we’re running one broker, one replica is enough.
#      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      CLUSTER_ID: "lcwpTXYsR7GsyE_7u7Hl9A"  # Use a pre-generated Cluster ID
#      KAFKA_ADVERTISED_HOST_NAME: kafka
#    volumes:
#      - ~/kafka-data:/var/lib/kafka/data
#    networks:
#       - airflownetwork
##### OLD KAFA SERVICES COMMENTED FOR NOW AS SWITCHING TO KESTRA############################################